{"ast":null,"code":"export default {\n  props: {\n    products: Array,\n    updateProduct: Function,\n    addProduct: Function\n  },\n  data() {\n    return {\n      isAddPopupOpen: false,\n      isUpdatePopupOpen: false,\n      updatedProduct: {\n        id: null,\n        name: '',\n        picture: '',\n        category_id: ''\n      },\n      newProduct: {\n        // Add this line to initialize newProduct\n        name: '',\n        picture: '',\n        category_id: null\n      }\n    };\n  },\n  methods: {\n    openAddPopup() {\n      this.isAddPopupOpen = true;\n      // Optionally, you can initialize data for the popup here\n      // For example, reset the form fields\n      this.newProduct = {\n        name: '',\n        picture: '',\n        category_id: null\n      };\n    },\n    closeAddPopup() {\n      this.isAddPopupOpen = false;\n    },\n    deleteProduct(id) {\n      this.$emit('deleteProduct', id);\n    },\n    openUpdatePopup(product) {\n      // Set the updatedProduct data and open the popup\n      this.updatedProduct = {\n        ...product\n      };\n      this.isUpdatePopupOpen = true;\n    },\n    closeUpdatePopup() {\n      // Close the popup\n      this.isUpdatePopupOpen = false;\n    },\n    async confirmDeleteProduct(id) {\n      try {\n        const confirmation = window.confirm('Are you sure you want to delete this product?');\n        if (confirmation) {\n          // Call the function in the parent component to delete the product\n          await this.deleteProduct(id);\n        }\n      } catch (error) {\n        console.error('Error deleting product:', error);\n        // Optionally, display an error message to the user\n      }\n    },\n    async addProductInPopup() {\n      try {\n        // Call the function in the parent component to add the product\n        await this.addProduct(this.newProduct);\n\n        // After adding the product, close the popup\n        this.closeAddPopup();\n      } catch (error) {\n        console.error('Error adding product in popup:', error);\n        // Optionally, display an error message to the user\n      }\n    },\n    async updateProductInPopup() {\n      try {\n        await this.updateProduct(this.updatedProduct);\n        this.closeUpdatePopup();\n      } catch (error) {\n        console.error('Error updating product:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","products","Array","updateProduct","Function","addProduct","data","isAddPopupOpen","isUpdatePopupOpen","updatedProduct","id","name","picture","category_id","newProduct","methods","openAddPopup","closeAddPopup","deleteProduct","$emit","openUpdatePopup","product","closeUpdatePopup","confirmDeleteProduct","confirmation","window","confirm","error","console","addProductInPopup","updateProductInPopup"],"sources":["/home/batuhan/Documents/vartur1/vartur0110/frontend/src/components/ProductTable.vue"],"sourcesContent":["<!-- ProductTable.vue -->\n<template>\n  <div>\n    <h2>Product Table</h2>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Picture</th>\n          <th>Category ID</th>\n          <th>Created At</th>\n          <th>Updated At</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"product in products\" :key=\"product.id\">\n          <td>{{ product.id }}</td>\n          <td>{{ product.name }}</td>\n          <td>{{ product.picture }}</td>\n          <td>{{ product.category_id }}</td>\n          <td>{{ product.created_at }}</td>\n          <td>{{ product.updated_at }}</td>\n          <td>\n            <button @click=\"confirmDeleteProduct(product.id)\">Delete</button>\n            <button @click=\"openUpdatePopup(product)\">Update</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <button @click=\"openAddPopup\">Add New Product</button>\n\n    <!-- Add the popup code here -->\n    <div v-if=\"isUpdatePopupOpen\" class=\"popup\">\n      <div class=\"popup-content\">\n        <h2>Update Product</h2>\n        <div>\n          <label for=\"updateName\">Name:</label>\n          <input v-model=\"updatedProduct.name\" type=\"text\" id=\"updateName\" />\n        </div>\n        <div>\n          <label for=\"updatePicture\">Picture:</label>\n          <input v-model=\"updatedProduct.picture\" type=\"text\" id=\"updatePicture\" />\n        </div>\n        <div>\n          <label for=\"updateCategoryId\">Category ID:</label>\n          <input v-model=\"updatedProduct.category_id\" type=\"text\" id=\"updateCategoryId\" />\n        </div>\n        <div>\n          <button @click=\"updateProductInPopup\">Update</button>\n          <button @click=\"closeUpdatePopup\">Cancel</button>\n        </div>\n      </div>\n    </div>\n    <!-- Add the popup code here -->\n    <div v-if=\"isAddPopupOpen\" class=\"popup\">\n      <div class=\"popup-content\">\n        <h2>Add New Product</h2>\n        <div>\n          <label for=\"addName\">Name:</label>\n          <input v-model=\"newProduct.name\" type=\"text\" id=\"addName\" />\n        </div>\n        <div>\n          <label for=\"addPicture\">Picture:</label>\n          <input v-model=\"newProduct.picture\" type=\"text\" id=\"addPicture\" />\n        </div>\n        <div>\n          <label for=\"addCategoryId\">Category ID:</label>\n          <input v-model=\"newProduct.category_id\" type=\"text\" id=\"addCategoryId\" />\n        </div>\n        <div>\n          <button @click=\"addProductInPopup\">Add</button>\n          <button @click=\"closeAddPopup\">Cancel</button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    products: Array,\n    updateProduct: Function,\n    addProduct: Function,\n    \n  },\n  data() {\n    return {\n      isAddPopupOpen: false,\n      isUpdatePopupOpen: false,\n      updatedProduct: {\n        id: null,\n        name: '',\n        picture: '',\n        category_id: '',\n      },\n      newProduct: {  // Add this line to initialize newProduct\n        name: '',\n        picture: '',\n        category_id: null,\n      },\n    };\n  },\n\n\n  methods: {\n    openAddPopup() {\n      this.isAddPopupOpen = true;\n      // Optionally, you can initialize data for the popup here\n      // For example, reset the form fields\n      this.newProduct = {\n        name: '',\n        picture: '',\n        category_id: null,\n      };\n    },\n\n    \n    closeAddPopup() {\n      this.isAddPopupOpen = false;\n    },\n\n\n    deleteProduct(id) {\n      this.$emit('deleteProduct', id);\n    },\n    \n    openUpdatePopup(product) {\n      // Set the updatedProduct data and open the popup\n      this.updatedProduct = { ...product };\n      this.isUpdatePopupOpen = true;\n    },\n    closeUpdatePopup() {\n      // Close the popup\n      this.isUpdatePopupOpen = false;\n    },\n\n    async confirmDeleteProduct(id) {\n      try {\n        const confirmation = window.confirm('Are you sure you want to delete this product?');\n        if (confirmation) {\n          // Call the function in the parent component to delete the product\n          await this.deleteProduct(id);\n        }\n      } catch (error) {\n        console.error('Error deleting product:', error);\n        // Optionally, display an error message to the user\n      }\n    },\n\n    async addProductInPopup() {\n      try {\n        // Call the function in the parent component to add the product\n        await this.addProduct(this.newProduct);\n\n        // After adding the product, close the popup\n        this.closeAddPopup();\n      } catch (error) {\n        console.error('Error adding product in popup:', error);\n        // Optionally, display an error message to the user\n      }\n    },\n\n    async updateProductInPopup() {\n      try {\n        await this.updateProduct(this.updatedProduct);\n        this.closeUpdatePopup();\n      } catch (error) {\n        console.error('Error updating product:', error);\n      }\n    }\n  },\n};\n</script>\n\n<style scoped>\n.popup {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 20px;\n  background-color: #fff;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n}\n\n.popup-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n}\n</style>\n"],"mappings":"AAkFA,eAAe;EACbA,KAAK,EAAE;IACLC,QAAQ,EAAEC,KAAK;IACfC,aAAa,EAAEC,QAAQ;IACvBC,UAAU,EAAED;EAEd,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,KAAK;MACrBC,iBAAiB,EAAE,KAAK;MACxBC,cAAc,EAAE;QACdC,EAAE,EAAE,IAAI;QACRC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE;MACf,CAAC;MACDC,UAAU,EAAE;QAAG;QACbH,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE;MACf;IACF,CAAC;EACH,CAAC;EAGDE,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACT,cAAa,GAAI,IAAI;MAC1B;MACA;MACA,IAAI,CAACO,UAAS,GAAI;QAChBH,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE;MACf,CAAC;IACH,CAAC;IAGDI,aAAaA,CAAA,EAAG;MACd,IAAI,CAACV,cAAa,GAAI,KAAK;IAC7B,CAAC;IAGDW,aAAaA,CAACR,EAAE,EAAE;MAChB,IAAI,CAACS,KAAK,CAAC,eAAe,EAAET,EAAE,CAAC;IACjC,CAAC;IAEDU,eAAeA,CAACC,OAAO,EAAE;MACvB;MACA,IAAI,CAACZ,cAAa,GAAI;QAAE,GAAGY;MAAQ,CAAC;MACpC,IAAI,CAACb,iBAAgB,GAAI,IAAI;IAC/B,CAAC;IACDc,gBAAgBA,CAAA,EAAG;MACjB;MACA,IAAI,CAACd,iBAAgB,GAAI,KAAK;IAChC,CAAC;IAED,MAAMe,oBAAoBA,CAACb,EAAE,EAAE;MAC7B,IAAI;QACF,MAAMc,YAAW,GAAIC,MAAM,CAACC,OAAO,CAAC,+CAA+C,CAAC;QACpF,IAAIF,YAAY,EAAE;UAChB;UACA,MAAM,IAAI,CAACN,aAAa,CAACR,EAAE,CAAC;QAC9B;MACF,EAAE,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;MACF;IACF,CAAC;IAED,MAAME,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF;QACA,MAAM,IAAI,CAACxB,UAAU,CAAC,IAAI,CAACS,UAAU,CAAC;;QAEtC;QACA,IAAI,CAACG,aAAa,CAAC,CAAC;MACtB,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtD;MACF;IACF,CAAC;IAED,MAAMG,oBAAoBA,CAAA,EAAG;MAC3B,IAAI;QACF,MAAM,IAAI,CAAC3B,aAAa,CAAC,IAAI,CAACM,cAAc,CAAC;QAC7C,IAAI,CAACa,gBAAgB,CAAC,CAAC;MACzB,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}