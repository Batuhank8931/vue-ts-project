{"ast":null,"code":"export default {\n  props: {\n    products: Array\n  },\n  data() {\n    return {\n      isUpdatePopupOpen: false,\n      updatedProduct: {\n        id: null,\n        name: '',\n        picture: '',\n        category_id: ''\n      }\n    };\n  },\n  methods: {\n    deleteProduct(id) {\n      this.$emit('deleteProduct', id);\n    },\n    openUpdatePopup(product) {\n      // Set the updatedProduct data and open the popup\n      this.updatedProduct = {\n        ...product\n      };\n      this.isUpdatePopupOpen = true;\n    },\n    closeUpdatePopup() {\n      // Close the popup\n      this.isUpdatePopupOpen = false;\n    },\n    async updateProduct(productData) {\n      try {\n        // Use axios or your preferred HTTP library to send an update request to your backend\n        await axios.put(`http://localhost:3000/products/${productData.id}`, productData);\n        // Optionally, you can fetch the updated product list or perform other actions\n        this.fetchProducts();\n      } catch (error) {\n        console.error('Error updating product:', error);\n        throw error; // Rethrow the error to propagate it up the chain\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","products","Array","data","isUpdatePopupOpen","updatedProduct","id","name","picture","category_id","methods","deleteProduct","$emit","openUpdatePopup","product","closeUpdatePopup","updateProduct","productData","axios","put","fetchProducts","error","console"],"sources":["/home/batuhan/Documents/vartur1/vartur0110/frontend/src/components/ProductTable.vue"],"sourcesContent":["<!-- ProductTable.vue -->\n<template>\n  <div>\n    <h2>Product Table</h2>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Picture</th>\n          <th>Category ID</th>\n          <th>Created At</th>\n          <th>Updated At</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"product in products\" :key=\"product.id\">\n          <td>{{ product.id }}</td>\n          <td>{{ product.name }}</td>\n          <td>{{ product.picture }}</td>\n          <td>{{ product.category_id }}</td>\n          <td>{{ product.created_at }}</td>\n          <td>{{ product.updated_at }}</td>\n          <td>\n            <button @click=\"deleteProduct(product.id)\">Delete</button>\n            <button @click=\"openUpdatePopup(product)\">Update</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Add the popup code here -->\n    <div v-if=\"isUpdatePopupOpen\" class=\"popup\">\n      <div class=\"popup-content\">\n        <h2>Update Product</h2>\n        <div>\n          <label for=\"updateName\">Name:</label>\n          <input v-model=\"updatedProduct.name\" type=\"text\" id=\"updateName\" />\n        </div>\n        <div>\n          <label for=\"updatePicture\">Picture:</label>\n          <input v-model=\"updatedProduct.picture\" type=\"text\" id=\"updatePicture\" />\n        </div>\n        <div>\n          <label for=\"updateCategoryId\">Category ID:</label>\n          <input v-model=\"updatedProduct.category_id\" type=\"text\" id=\"updateCategoryId\" />\n        </div>\n        <div>\n          <button @click=\"updateProductInPopup\">Update</button>\n          <button @click=\"closeUpdatePopup\">Cancel</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    products: Array,\n  },\n  data() {\n    return {\n      isUpdatePopupOpen: false,\n      updatedProduct: {\n        id: null,\n        name: '',\n        picture: '',\n        category_id: '',\n      },\n    };\n  },\n  methods: {\n    deleteProduct(id) {\n      this.$emit('deleteProduct', id);\n    },\n    openUpdatePopup(product) {\n      // Set the updatedProduct data and open the popup\n      this.updatedProduct = { ...product };\n      this.isUpdatePopupOpen = true;\n    },\n    closeUpdatePopup() {\n      // Close the popup\n      this.isUpdatePopupOpen = false;\n    },\n    async updateProduct(productData) {\n    try {\n      // Use axios or your preferred HTTP library to send an update request to your backend\n      await axios.put(`http://localhost:3000/products/${productData.id}`, productData);\n      // Optionally, you can fetch the updated product list or perform other actions\n      this.fetchProducts();\n    } catch (error) {\n      console.error('Error updating product:', error);\n      throw error; // Rethrow the error to propagate it up the chain\n    }\n  },\n  },\n};\n</script>\n\n<style scoped>\n.popup {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.popup-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n}\n</style>\n"],"mappings":"AA0DA,eAAe;EACbA,KAAK,EAAE;IACLC,QAAQ,EAAEC;EACZ,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE,KAAK;MACxBC,cAAc,EAAE;QACdC,EAAE,EAAE,IAAI;QACRC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE;MACf;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAACL,EAAE,EAAE;MAChB,IAAI,CAACM,KAAK,CAAC,eAAe,EAAEN,EAAE,CAAC;IACjC,CAAC;IACDO,eAAeA,CAACC,OAAO,EAAE;MACvB;MACA,IAAI,CAACT,cAAa,GAAI;QAAE,GAAGS;MAAQ,CAAC;MACpC,IAAI,CAACV,iBAAgB,GAAI,IAAI;IAC/B,CAAC;IACDW,gBAAgBA,CAAA,EAAG;MACjB;MACA,IAAI,CAACX,iBAAgB,GAAI,KAAK;IAChC,CAAC;IACD,MAAMY,aAAaA,CAACC,WAAW,EAAE;MACjC,IAAI;QACF;QACA,MAAMC,KAAK,CAACC,GAAG,CAAE,kCAAiCF,WAAW,CAACX,EAAG,EAAC,EAAEW,WAAW,CAAC;QAChF;QACA,IAAI,CAACG,aAAa,CAAC,CAAC;MACtB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,MAAMA,KAAK,EAAE;MACf;IACF;EACA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}