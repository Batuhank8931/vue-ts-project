{"ast":null,"code":"import axios from 'axios';\nimport CategoryTable from './components/CategoryTable.vue';\nimport CategoryForm from './components/CategoryForm.vue';\nimport ProductTable from './components/ProductTable.vue'; // Import your ProductTable component\n\nexport default {\n  name: 'App',\n  components: {\n    CategoryTable,\n    CategoryForm,\n    ProductTable // Register the ProductTable component\n  },\n  data() {\n    return {\n      categories: [],\n      products: [] // Initialize the products array\n    };\n  },\n  mounted() {\n    this.fetchCategories();\n    this.fetchProducts(); // Fetch products when the component is mounted\n  },\n  methods: {\n    async fetchCategories() {\n      try {\n        const response = await axios.get('http://localhost:3000/categories');\n        this.categories = response.data.categories;\n        console.log('Fetched categories:', this.categories);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    },\n    async deleteCategory(id) {\n      try {\n        await axios.delete(`http://localhost:3000/categories/${id}`);\n        this.fetchCategories();\n      } catch (error) {\n        console.error('Error deleting category:', error);\n      }\n    },\n    async createCategory(category) {\n      try {\n        await axios.post('http://localhost:3000/categories', category);\n        this.fetchCategories();\n      } catch (error) {\n        console.error('Error creating category:', error);\n      }\n    },\n    async updateCategory(category) {\n      try {\n        // Call your backend API to update the category\n        await axios.put(`http://localhost:3000/categories/${category.id}`, category);\n        // Optionally, you can refresh the categories\n        this.fetchCategories();\n      } catch (error) {\n        console.error('Error updating category:', error);\n      }\n    },\n    // New method for adding category\n    async addCategory(category) {\n      try {\n        await axios.post('http://localhost:3000/categories', category);\n        this.fetchCategories();\n      } catch (error) {\n        console.error('Error adding category:', error);\n      }\n    },\n    async fetchProducts() {\n      try {\n        const response = await axios.get('http://localhost:3000/products');\n        this.products = response.data.products;\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n    async updateProductto(product) {\n      try {\n        // Call your backend API to update the product\n        await axios.put(`http://localhost:3000/products/${product.id}`, product);\n        // Optionally, you can refresh the products\n        this.fetchProducts();\n      } catch (error) {\n        console.error('Error updating product:', error);\n      }\n    },\n    async deleteProduct(id) {\n      try {\n        await axios.delete(`http://localhost:3000/products/${id}`);\n        this.fetchProducts();\n      } catch (error) {\n        console.error(`Error deleting product with ID ${id}:`, error);\n\n        // Optionally, you can display a user-friendly error message\n        // and handle the error as needed.\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","CategoryTable","CategoryForm","ProductTable","name","components","data","categories","products","mounted","fetchCategories","fetchProducts","methods","response","get","console","log","error","deleteCategory","id","delete","createCategory","category","post","updateCategory","put","addCategory","updateProductto","product","deleteProduct"],"sources":["/home/batuhan/Documents/vartur1/vartur0110/frontend/src/App.vue"],"sourcesContent":["<!-- frontend/src/App.vue -->\n<template>\n  <div id=\"app\">\n    <CategoryTable\n      :categories=\"categories\"\n      :deleteCategory=\"deleteCategory\"\n      :updateCategory=\"updateCategory\"\n      :addCategory=\"addCategory\"\n    />\n    <CategoryForm @createCategory=\"createCategory\" />\n    <ProductTable :products=\"products\" @deleteProduct=\"deleteProduct\" @updateProductto=\"updateProductto\" @openUpdatePopup=\"openUpdatePopup\" />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport CategoryTable from './components/CategoryTable.vue';\nimport CategoryForm from './components/CategoryForm.vue';\nimport ProductTable from './components/ProductTable.vue'; // Import your ProductTable component\n\nexport default {\n  name: 'App',\n  components: {\n    CategoryTable,\n    CategoryForm,\n    ProductTable, // Register the ProductTable component\n  },\n  data() {\n    return {\n      categories: [],\n      products: [], // Initialize the products array\n      \n    };\n  },\n  mounted() {\n    this.fetchCategories();\n    this.fetchProducts(); // Fetch products when the component is mounted\n  },\n  methods: {\n    async fetchCategories() {\n      try {\n        const response = await axios.get('http://localhost:3000/categories');\n        this.categories = response.data.categories;\n        console.log('Fetched categories:', this.categories);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    },\n\n    async deleteCategory(id) {\n      try {\n        await axios.delete(`http://localhost:3000/categories/${id}`);\n        this.fetchCategories();\n      } catch (error) {\n        console.error('Error deleting category:', error);\n      }\n    },\n\n    async createCategory(category) {\n      try {\n        await axios.post('http://localhost:3000/categories', category);\n        this.fetchCategories();\n      } catch (error) {\n        console.error('Error creating category:', error);\n      }\n    },\n\n    async updateCategory(category) {\n      try {\n        // Call your backend API to update the category\n        await axios.put(`http://localhost:3000/categories/${category.id}`, category);\n        // Optionally, you can refresh the categories\n        this.fetchCategories();\n      } catch (error) {\n        console.error('Error updating category:', error);\n      }\n    },\n\n    // New method for adding category\n    async addCategory(category) {\n      try {\n        await axios.post('http://localhost:3000/categories', category);\n        this.fetchCategories();\n      } catch (error) {\n        console.error('Error adding category:', error);\n      }\n    },\n\n\n    async fetchProducts() {\n      try {\n        const response = await axios.get('http://localhost:3000/products');\n        this.products = response.data.products;\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n\n    async updateProductto(product) {\n      try {\n        // Call your backend API to update the product\n        await axios.put(`http://localhost:3000/products/${product.id}`, product);\n        // Optionally, you can refresh the products\n        this.fetchProducts();\n      } catch (error) {\n        console.error('Error updating product:', error);\n      }\n    },\n\n    async deleteProduct(id) {\n      try {\n        await axios.delete(`http://localhost:3000/products/${id}`);\n        this.fetchProducts();\n      } catch (error) {\n        console.error(`Error deleting product with ID ${id}:`, error);\n\n        // Optionally, you can display a user-friendly error message\n        // and handle the error as needed.\n      }\n    },\n\n  },\n};\n</script>\n\n<style>\n#app {\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\nth, td {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n\nth {\n  background-color: #f2f2f2;\n}\n</style>\n"],"mappings":"AAeA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,aAAY,MAAO,gCAAgC;AAC1D,OAAOC,YAAW,MAAO,+BAA+B;AACxD,OAAOC,YAAW,MAAO,+BAA+B,EAAE;;AAE1D,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVJ,aAAa;IACbC,YAAY;IACZC,YAAY,CAAE;EAChB,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,EAAE,CAAE;IAEhB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,eAAe,CAAC,CAAC;IACtB,IAAI,CAACC,aAAa,CAAC,CAAC,EAAE;EACxB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,kCAAkC,CAAC;QACpE,IAAI,CAACP,UAAS,GAAIM,QAAQ,CAACP,IAAI,CAACC,UAAU;QAC1CQ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACT,UAAU,CAAC;MACrD,EAAE,OAAOU,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAED,MAAMC,cAAcA,CAACC,EAAE,EAAE;MACvB,IAAI;QACF,MAAMnB,KAAK,CAACoB,MAAM,CAAE,oCAAmCD,EAAG,EAAC,CAAC;QAC5D,IAAI,CAACT,eAAe,CAAC,CAAC;MACxB,EAAE,OAAOO,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,MAAMI,cAAcA,CAACC,QAAQ,EAAE;MAC7B,IAAI;QACF,MAAMtB,KAAK,CAACuB,IAAI,CAAC,kCAAkC,EAAED,QAAQ,CAAC;QAC9D,IAAI,CAACZ,eAAe,CAAC,CAAC;MACxB,EAAE,OAAOO,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,MAAMO,cAAcA,CAACF,QAAQ,EAAE;MAC7B,IAAI;QACF;QACA,MAAMtB,KAAK,CAACyB,GAAG,CAAE,oCAAmCH,QAAQ,CAACH,EAAG,EAAC,EAAEG,QAAQ,CAAC;QAC5E;QACA,IAAI,CAACZ,eAAe,CAAC,CAAC;MACxB,EAAE,OAAOO,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED;IACA,MAAMS,WAAWA,CAACJ,QAAQ,EAAE;MAC1B,IAAI;QACF,MAAMtB,KAAK,CAACuB,IAAI,CAAC,kCAAkC,EAAED,QAAQ,CAAC;QAC9D,IAAI,CAACZ,eAAe,CAAC,CAAC;MACxB,EAAE,OAAOO,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAGD,MAAMN,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,gCAAgC,CAAC;QAClE,IAAI,CAACN,QAAO,GAAIK,QAAQ,CAACP,IAAI,CAACE,QAAQ;MACxC,EAAE,OAAOS,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,MAAMU,eAAeA,CAACC,OAAO,EAAE;MAC7B,IAAI;QACF;QACA,MAAM5B,KAAK,CAACyB,GAAG,CAAE,kCAAiCG,OAAO,CAACT,EAAG,EAAC,EAAES,OAAO,CAAC;QACxE;QACA,IAAI,CAACjB,aAAa,CAAC,CAAC;MACtB,EAAE,OAAOM,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAED,MAAMY,aAAaA,CAACV,EAAE,EAAE;MACtB,IAAI;QACF,MAAMnB,KAAK,CAACoB,MAAM,CAAE,kCAAiCD,EAAG,EAAC,CAAC;QAC1D,IAAI,CAACR,aAAa,CAAC,CAAC;MACtB,EAAE,OAAOM,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAE,kCAAiCE,EAAG,GAAE,EAAEF,KAAK,CAAC;;QAE7D;QACA;MACF;IACF;EAEF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}