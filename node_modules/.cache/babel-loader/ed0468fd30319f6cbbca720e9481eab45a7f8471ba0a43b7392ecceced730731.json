{"ast":null,"code":"export default {\n  props: {\n    products: Array,\n    updateProduct: Function,\n    addProduct: Function\n  },\n  data() {\n    return {\n      isUpdatePopupOpen: false,\n      updatedProduct: {\n        id: null,\n        name: '',\n        picture: '',\n        category_id: ''\n      }\n    };\n  },\n  mounted() {\n    // Log the received updateProduct method\n    console.log('Received updateProduct method:', this.updateProduct);\n  },\n  methods: {\n    openAddPopup() {\n      // Reset the updatedProduct data\n      this.updatedProduct = {\n        id: null,\n        name: '',\n        picture: '',\n        category_id: ''\n      };\n      // Open the popup for adding a new product\n      this.isUpdatePopupOpen = true;\n    },\n    addProduct() {\n      // Implement the logic to add a new product using this.newProduct\n      // Once added, you can close the popup and refresh the products\n      this.$emit('addProduct', this.newProduct);\n      this.closeAddPopup();\n    },\n    deleteProduct(id) {\n      this.$emit('deleteProduct', id);\n    },\n    openUpdatePopup(product) {\n      // Set the updatedProduct data and open the popup\n      this.updatedProduct = {\n        ...product\n      };\n      this.isUpdatePopupOpen = true;\n    },\n    closeUpdatePopup() {\n      // Close the popup\n      this.isUpdatePopupOpen = false;\n    },\n    async updateProductInPopup() {\n      try {\n        await this.updateProduct(this.updatedProduct);\n        this.closeUpdatePopup();\n      } catch (error) {\n        console.error('Error updating product:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","products","Array","updateProduct","Function","addProduct","data","isUpdatePopupOpen","updatedProduct","id","name","picture","category_id","mounted","console","log","methods","openAddPopup","$emit","newProduct","closeAddPopup","deleteProduct","openUpdatePopup","product","closeUpdatePopup","updateProductInPopup","error"],"sources":["/home/batuhan/Documents/vartur1/vartur0110/frontend/src/components/ProductTable.vue"],"sourcesContent":["<!-- ProductTable.vue -->\n<template>\n  <div>\n    <h2>Product Table</h2>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Picture</th>\n          <th>Category ID</th>\n          <th>Created At</th>\n          <th>Updated At</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"product in products\" :key=\"product.id\">\n          <td>{{ product.id }}</td>\n          <td>{{ product.name }}</td>\n          <td>{{ product.picture }}</td>\n          <td>{{ product.category_id }}</td>\n          <td>{{ product.created_at }}</td>\n          <td>{{ product.updated_at }}</td>\n          <td>\n            <button @click=\"deleteProduct(product.id)\">Delete</button>\n            <button @click=\"openUpdatePopup(product)\">Update</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <button @click=\"openAddPopup\">Add New Product</button>\n\n    <!-- Add the popup code here -->\n    <div v-if=\"isUpdatePopupOpen\" class=\"popup\">\n      <div class=\"popup-content\">\n        <h2>Update Product</h2>\n        <div>\n          <label for=\"updateName\">Name:</label>\n          <input v-model=\"updatedProduct.name\" type=\"text\" id=\"updateName\" />\n        </div>\n        <div>\n          <label for=\"updatePicture\">Picture:</label>\n          <input v-model=\"updatedProduct.picture\" type=\"text\" id=\"updatePicture\" />\n        </div>\n        <div>\n          <label for=\"updateCategoryId\">Category ID:</label>\n          <input v-model=\"updatedProduct.category_id\" type=\"text\" id=\"updateCategoryId\" />\n        </div>\n        <div>\n          <button @click=\"updateProductInPopup\">Update</button>\n          <button @click=\"closeUpdatePopup\">Cancel</button>\n        </div>\n      </div>\n    </div>\n     <!-- Add the popup code here -->\n    <div v-if=\"isAddPopupOpen\" class=\"popup\">\n      <div class=\"popup-content\">\n        <h2>Add New Product</h2>\n        <div>\n          <label for=\"addName\">Name:</label>\n          <input v-model=\"newProduct.name\" type=\"text\" id=\"addName\" />\n        </div>\n        <div>\n          <label for=\"addPicture\">Picture:</label>\n          <input v-model=\"newProduct.picture\" type=\"text\" id=\"addPicture\" />\n        </div>\n        <div>\n          <label for=\"addCategoryId\">Category ID:</label>\n          <input v-model=\"newProduct.category_id\" type=\"text\" id=\"addCategoryId\" />\n        </div>\n        <div>\n          <button @click=\"addProduct\">Add</button>\n          <button @click=\"closeAddPopup\">Cancel</button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    products: Array,\n    updateProduct: Function,\n    addProduct: Function,\n  },\n  data() {\n    return {\n      isUpdatePopupOpen: false,\n      updatedProduct: {\n        id: null,\n        name: '',\n        picture: '',\n        category_id: '',\n      },\n    };\n  },\n  mounted() {\n    // Log the received updateProduct method\n    console.log('Received updateProduct method:', this.updateProduct);\n  },\n  methods: {\n\n    openAddPopup() {\n      // Reset the updatedProduct data\n      this.updatedProduct = {\n        id: null,\n        name: '',\n        picture: '',\n        category_id: '',\n      };\n      // Open the popup for adding a new product\n      this.isUpdatePopupOpen = true;\n    },\n\n    addProduct() {\n      // Implement the logic to add a new product using this.newProduct\n      // Once added, you can close the popup and refresh the products\n      this.$emit('addProduct', this.newProduct);\n      this.closeAddPopup();\n    },\n    \n    deleteProduct(id) {\n      this.$emit('deleteProduct', id);\n    },\n    openUpdatePopup(product) {\n      // Set the updatedProduct data and open the popup\n      this.updatedProduct = { ...product };\n      this.isUpdatePopupOpen = true;\n    },\n    closeUpdatePopup() {\n      // Close the popup\n      this.isUpdatePopupOpen = false;\n    },\n\n    async updateProductInPopup() {\n      try {\n        await this.updateProduct(this.updatedProduct);\n        this.closeUpdatePopup();\n      } catch (error) {\n        console.error('Error updating product:', error);\n      }\n    }\n  },\n};\n</script>\n\n<style scoped>\n.popup {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 20px;\n  background-color: #fff;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n}\n\n.popup-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n}\n</style>\n"],"mappings":"AAkFA,eAAe;EACbA,KAAK,EAAE;IACLC,QAAQ,EAAEC,KAAK;IACfC,aAAa,EAAEC,QAAQ;IACvBC,UAAU,EAAED;EACd,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE,KAAK;MACxBC,cAAc,EAAE;QACdC,EAAE,EAAE,IAAI;QACRC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE;MACf;IACF,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACAC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAACZ,aAAa,CAAC;EACnE,CAAC;EACDa,OAAO,EAAE;IAEPC,YAAYA,CAAA,EAAG;MACb;MACA,IAAI,CAACT,cAAa,GAAI;QACpBC,EAAE,EAAE,IAAI;QACRC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE;MACf,CAAC;MACD;MACA,IAAI,CAACL,iBAAgB,GAAI,IAAI;IAC/B,CAAC;IAEDF,UAAUA,CAAA,EAAG;MACX;MACA;MACA,IAAI,CAACa,KAAK,CAAC,YAAY,EAAE,IAAI,CAACC,UAAU,CAAC;MACzC,IAAI,CAACC,aAAa,CAAC,CAAC;IACtB,CAAC;IAEDC,aAAaA,CAACZ,EAAE,EAAE;MAChB,IAAI,CAACS,KAAK,CAAC,eAAe,EAAET,EAAE,CAAC;IACjC,CAAC;IACDa,eAAeA,CAACC,OAAO,EAAE;MACvB;MACA,IAAI,CAACf,cAAa,GAAI;QAAE,GAAGe;MAAQ,CAAC;MACpC,IAAI,CAAChB,iBAAgB,GAAI,IAAI;IAC/B,CAAC;IACDiB,gBAAgBA,CAAA,EAAG;MACjB;MACA,IAAI,CAACjB,iBAAgB,GAAI,KAAK;IAChC,CAAC;IAED,MAAMkB,oBAAoBA,CAAA,EAAG;MAC3B,IAAI;QACF,MAAM,IAAI,CAACtB,aAAa,CAAC,IAAI,CAACK,cAAc,CAAC;QAC7C,IAAI,CAACgB,gBAAgB,CAAC,CAAC;MACzB,EAAE,OAAOE,KAAK,EAAE;QACdZ,OAAO,CAACY,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}